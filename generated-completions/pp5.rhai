// Completion script generated for pp5
fn predicate(ctx){
	let name = ctx.cmd_name;
	name!=()&&name=="pp5"
}
fn completions(ctx){
	if is_short_flag(ctx){
		return with_format(["-a", "-a", "-a", "-a", "-A", "-A", "-a", "-B", "-B", "-C", "-C", "-c", "-c", "-c", "-cd", "-cd", "-d", "-d", "-e", "-e", "-e", "-E", "-E", "-x", "-x", "-x", "-X", "-X", "-f", "-f", "-f", "-g", "-g", "-h", "-h", "-I", "-I", "-l", "-l", "-L", "-L", "-F", "-F", "-o", "-F", "-M", "-M", "-a", "-A", "-B", "-C", "-c", "-cd", "-d", "-e", "-E", "-x", "-X", "-f", "-g", "-h", "-I", "-l", "-L", "-F", "-M", "-M", "-M", "-M", "-m", "-n", "-N", "-o", "-p", "-P", "-r", "-S", "-s", "-T", "-u", "-v", "-V", "-z"]);
	}
	if is_long_flag(ctx){
		return with_format([["--addfile", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--addfile", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--addlist", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--addlist", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--bundle", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--bundle", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--clean", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--clean", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--compile", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--compile", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--cachedeps", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--cachedeps", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--dependent", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--dependent", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--eval", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--eval", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--evalfeature", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--evalfeature", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--execute", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--execute", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--xargs", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--xargs", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--xargs", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--exclude", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--exclude", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--filter", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--filter", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--gui", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--gui", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--help", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--help", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--lib", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--lib", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--link", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--link", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--log", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--log", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--modfilter", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--modfilter", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--module", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--module", ".IP \"-M Foo::**\" 4 .IX Item \"-M Foo::**\" Add every module in the \\f(CW\\*(C`Fo..."],
		["--addfile", "Add an extra file into the package. If the file is a directory, recursively a..."],
		["--addlist", "Read a list of file/directory names from \\s-1FILE\\s0, adding them into the pa..."],
		["--bundle", "Bundle core modules in the resulting package. This option is enabled by defau..."],
		["--clean", "Clean up temporary files extracted from the application at runtime. By defaul..."],
		["--compile", "Run \\f(CW\\*(C`perl -c inputfile\\*(C' to determine additional run-time depende..."],
		["--cachedeps", "Use \\s-1FILE\\s0 to cache detected dependencies. Creates \\s-1FILE\\s0 unless pr..."],
		["--dependent", "Reduce the executable size by not including a copy of perl interpreter. Execu..."],
		["--eval", "Package a one-liner, much the same as \\f(CW\\*(C`perl -e \\*(Aq...\\*(Aq\\*(C'"],
		["--evalfeature", "Behaves just like \\f(CW\\*(C`-e\\*(C', except that it implicitly enables all op..."],
		["--execute", "Run \\f(CW\\*(C`perl inputfile\\*(C' to determine additional run-time dependenci..."],
		["--xargs", "If -x is given, splits the \\f(CW\\*(C`STRING\\*(C' using the function  \\f(CW\\*(..."],
		["--exclude", "Exclude the given module from the dependency search path and from the package..."],
		["--filter", "Filter source script(s) with a PAR::Filter subclass. You may specify multiple..."],
		["--gui", "Build an executable that does not have a console window. This option is ignor..."],
		["--help", "Show basic usage information"],
		["--lib", "Add the given directory to the perl module search path. May be specified mult..."],
		["--link", "Add the given shared library (a.k.a. shared object or \\s-1DLL\\s0) into the pa..."],
		["--log", "Log the output of packaging to a file rather than to stdout"],
		["--modfilter", "Filter included perl module(s) with a PAR::Filter subclass. You may specify m..."],
		["--module", "Add the specified module into the package, along with its dependencies. .Sp T..."],
		["--multiarch", "Build a multi-architecture \\s-1PAR\\s0 file. Implies -p"],
		["--noscan", "Skip the default static scanning altogether, using run-time dependencies from..."],
		["--namespace", "Add all modules in the namespace into the package,  along with their dependen..."],
		["--output", "File name for the final packaged executable"],
		["--par", "Create \\s-1PAR\\s0 archives only; do not package to a standalone binary"],
		["--perlscript", "Create stand-alone perl script; do not package to a standalone binary"],
		["--run", "Run the resulting packaged script after packaging it"],
		["--reusable", "\\s-1EXPERIMENTAL\\s0 .Sp Make the packaged executable reusable for running arb..."],
		["--save", "Do not delete generated \\s-1PAR\\s0 file after packaging"],
		["--sign", "Cryptographically sign the generated \\s-1PAR\\s0 or binary file using Module::..."],
		["--tempcache", "Set the program unique part of the cache directory name that is used if the p..."],
		["--unicode", "Package Unicode support (essentially utf8_heavy.pl and everything below the d..."],
		["--verbose", "Increase verbosity of output; \\s-1NUMBER\\s0 is an integer from \\f(CW1 to \\f(C..."],
		["--version", "Display the version number and copyrights of this program"],
		["--compress", "Set zip compression level; \\s-1NUMBER\\s0 is an integer from \\f(CW0 to \\f(CW9,..."]]);
	}
	[]
}
