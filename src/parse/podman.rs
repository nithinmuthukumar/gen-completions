use log::warn;

use super::{util, Flag};

/// For parsing man pages generated by Pod::Man
#[allow(clippy::case_sensitive_file_extension_comparisons)]
pub fn parse(cmd_name: &str, page_text: &str) -> Option<Vec<Flag>> {
  if !page_text.starts_with(r#".\" Automatically generated by Pod::Man"#) {
    return None;
  }
  match util::get_section(r#""OPTIONS""#, page_text) {
    Some(content) => {
      let mut flags = Vec::new();

      let mut paras = content.split(".IP");
      paras.next(); // Discard the part before the first option
      for para in paras {
        let data = util::remove_groff_formatting(para);
        let data = data.trim();
        if let Some(start) = data.find(".IX Item") {
          println!("{}", para);
          if let Some((options, desc)) = data[start..].split_once('\n') {
            if let Some(flag) = util::make_flag(options, Some(desc)) {
              flags.push(flag);
            }
          } else if !data.is_empty() {
            warn!(
              "In command {cmd_name}, no description, data: {}",
              util::truncate(data, 40)
            );
          }
        }
      }

      if flags.is_empty() {
        None
      } else {
        Some(flags)
      }
    }
    None => None,
  }
}
