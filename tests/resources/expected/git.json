{
  "git": {
    "args": [
      {
        "forms": ["-v", "--version"],
        "description": "Prints the Git suite version that the git program came from. This option is i..."
      },
      {
        "forms": ["-h", "--help"],
        "description": "Prints the synopsis and a list of the most commonly used commands. If the opt..."
      },
      {
        "forms": ["-C"],
        "description": "Run as if git was started in <path> instead of the current working directory...."
      },
      {
        "forms": ["-c"],
        "description": "Pass a configuration parameter to the command. The value given will override ..."
      },
      {
        "forms": ["--config-env"],
        "description": "Like -c <name>=<value>, give configuration variable <name> a value, where <en..."
      },
      {
        "forms": ["--exec-path"],
        "description": "Path to wherever your core Git programs are installed. This can also be contr..."
      },
      {
        "forms": ["--html-path"],
        "description": "Print the path, without trailing slash, where Git's HTML documentation is ins..."
      },
      {
        "forms": ["--man-path"],
        "description": "Print the manpath (see man(1)) for the man pages for this version of Git and ..."
      },
      {
        "forms": ["--info-path"],
        "description": "Print the path where the Info files documenting this version of Git are insta..."
      },
      {
        "forms": ["-p", "--paginate"],
        "description": "Pipe all output into less (or if set, $PAGER) if standard output is a termina..."
      },
      {
        "forms": ["-P", "--no-pager"],
        "description": "Do not pipe Git output into a pager"
      },
      {
        "forms": ["--git-dir"],
        "description": "Set the path to the repository (\".git\" directory). This can also be controlle..."
      },
      {
        "forms": ["--work-tree"],
        "description": "Set the path to the working tree. It can be an absolute path or a path relati..."
      },
      {
        "forms": ["--namespace"],
        "description": "Set the Git namespace. See gitnamespaces(7) for more details. Equivalent to s..."
      },
      {
        "forms": ["--bare"],
        "description": "Treat the repository as a bare repository. If GIT_DIR environment is not set,..."
      },
      {
        "forms": ["--no-replace-objects"],
        "description": "Do not use replacement refs to replace Git objects. See git-replace(1) for mo..."
      },
      {
        "forms": ["--literal-pathspecs"],
        "description": "Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equi..."
      },
      {
        "forms": ["--glob-pathspecs"],
        "description": "Add \"glob\" magic to all pathspec. This is equivalent to setting the GIT_GLOB_..."
      },
      {
        "forms": ["--noglob-pathspecs"],
        "description": "Add \"literal\" magic to all pathspec. This is equivalent to setting the GIT_NO..."
      },
      {
        "forms": ["--icase-pathspecs"],
        "description": "Add \"icase\" magic to all pathspec. This is equivalent to setting the GIT_ICAS..."
      },
      {
        "forms": ["--no-optional-locks"],
        "description": "Do not perform optional operations that require locks. This is equivalent to ..."
      },
      {
        "forms": ["--list-cmds"],
        "description": "List commands by group. This is an internal/experimental option and may chang..."
      },
      {
        "forms": ["--attr-source"],
        "description": "Read gitattributes from <tree-ish> instead of the worktree. See gitattributes..."
      }
    ],
    "subcommands": {
      "log": {
        "args": [
          {
            "forms": ["--follow"],
            "description": "Continue listing the history of a file beyond renames (works only for a singl..."
          },
          {
            "forms": ["--no-decorate", "--decorate"],
            "description": "Print out the ref names of any commits that are shown. If short is specified,..."
          },
          {
            "forms": ["--decorate-refs", "--decorate-refs-exclude"],
            "description": "For each candidate reference, do not use it for decoration if it matches any ..."
          },
          {
            "forms": ["--clear-decorations"],
            "description": "When specified, this option clears all previous --decorate-refs or --decorate..."
          },
          {
            "forms": ["--source"],
            "description": "Print out the ref name given on the command line by which each commit was rea..."
          },
          {
            "forms": ["--mailmap", "--use-mailmap"],
            "description": "Use mailmap file to map author and committer names and email addresses to can..."
          },
          {
            "forms": ["--full-diff"],
            "description": "Without this flag, git log -p <path>... shows commits that touch the specifie..."
          },
          {
            "forms": ["--log-size"],
            "description": "Include a line \\(lqlog size <number>\\(rq in the output for each commit, where..."
          },
          {
            "forms": ["-L", "-L"],
            "description": "Trace the evolution of the line range given by <start>,<end>, or by the funct..."
          },
          {
            "forms": ["-n", "--max-count"],
            "description": "Limit the number of commits to output"
          },
          {
            "forms": ["--skip"],
            "description": "Skip number commits before starting to show the commit output"
          },
          {
            "forms": ["--since", "--after"],
            "description": "Show commits more recent than a specific date"
          },
          {
            "forms": ["--since-as-filter"],
            "description": "Show all commits more recent than a specific date. This visits all commits in..."
          },
          {
            "forms": ["--until", "--before"],
            "description": "Show commits older than a specific date"
          },
          {
            "forms": ["--author", "--committer"],
            "description": "Limit the commits output to ones with author/committer header lines that matc..."
          },
          {
            "forms": ["--grep-reflog"],
            "description": "Limit the commits output to ones with reflog entries that match the specified..."
          },
          {
            "forms": ["--grep"],
            "description": "Limit the commits output to ones with log message that matches the specified ..."
          },
          {
            "forms": ["--all-match"],
            "description": "Limit the commits output to ones that match all given --grep, instead of ones..."
          },
          {
            "forms": ["--invert-grep"],
            "description": "Limit the commits output to ones with log message that do not match the patte..."
          },
          {
            "forms": ["-i", "--regexp-ignore-case"],
            "description": "Match the regular expression limiting patterns without regard to letter case"
          },
          {
            "forms": ["--basic-regexp"],
            "description": "Consider the limiting patterns to be basic regular expressions; this is the d..."
          },
          {
            "forms": ["-E", "--extended-regexp"],
            "description": "Consider the limiting patterns to be extended regular expressions instead of ..."
          },
          {
            "forms": ["-F", "--fixed-strings"],
            "description": "Consider the limiting patterns to be fixed strings (don't interpret pattern a..."
          },
          {
            "forms": ["-P", "--perl-regexp"],
            "description": "Consider the limiting patterns to be Perl-compatible regular expressions. Sup..."
          },
          {
            "forms": ["--remove-empty"],
            "description": "Stop when a given path disappears from the tree"
          },
          {
            "forms": ["--merges"],
            "description": "Print only merge commits. This is exactly the same as --min-parents=2"
          },
          {
            "forms": ["--no-merges"],
            "description": "Do not print commits with more than one parent. This is exactly the same as -..."
          },
          {
            "forms": ["--min-parents", "--max-parents", "--no-min-parents", "--no-max-parents"],
            "description": "Show only commits which have at least (or at most) that many parent commits. ..."
          },
          {
            "forms": ["--first-parent"],
            "description": "When finding commits to include, follow only the first parent commit upon see..."
          },
          {
            "forms": ["--exclude-first-parent-only"],
            "description": "When finding commits to exclude (with a ^), follow only the first parent comm..."
          },
          {
            "forms": ["--not"],
            "description": "Reverses the meaning of the ^ prefix (or lack thereof) for all following revi..."
          },
          {
            "forms": ["--all"],
            "description": "Pretend as if all the refs in refs/, along with HEAD, are listed on the comma..."
          },
          {
            "forms": ["--branches"],
            "description": "Pretend as if all the refs in refs/heads are listed on the command line as <c..."
          },
          {
            "forms": ["--tags"],
            "description": "Pretend as if all the refs in refs/tags are listed on the command line as <co..."
          },
          {
            "forms": ["--remotes"],
            "description": "Pretend as if all the refs in refs/remotes are listed on the command line as ..."
          },
          {
            "forms": ["--glob"],
            "description": "Pretend as if all the refs matching shell glob <glob-pattern> are listed on t..."
          },
          {
            "forms": ["--exclude"],
            "description": "Do not include refs matching <glob-pattern> that the next --all, --branches, ..."
          },
          {
            "forms": ["--exclude-hidden"],
            "description": "Do not include refs that would be hidden by git-fetch, git-receive-pack or gi..."
          },
          {
            "forms": ["--reflog"],
            "description": "Pretend as if all objects mentioned by reflogs are listed on the command line..."
          },
          {
            "forms": ["--alternate-refs"],
            "description": "Pretend as if all objects mentioned as ref tips of alternate repositories wer..."
          },
          {
            "forms": ["--single-worktree"],
            "description": "By default, all working trees will be examined by the following options when ..."
          },
          {
            "forms": ["--ignore-missing"],
            "description": "Upon seeing an invalid object name in the input, pretend as if the bad input ..."
          },
          {
            "forms": ["--bisect"],
            "description": "Pretend as if the bad bisection ref refs/bisect/bad was listed and as if it w..."
          },
          {
            "forms": ["--stdin"],
            "description": "In addition to the <commit> listed on the command line, read them from the st..."
          },
          {
            "forms": ["--cherry-mark"],
            "description": "Like --cherry-pick (see below) but mark equivalent commits with = rather than..."
          },
          {
            "forms": ["--cherry-pick"],
            "description": "Omit any commit that introduces the same change as another commit on the \\(lq..."
          },
          {
            "forms": ["--left-only", "--right-only"],
            "description": "List only commits on the respective side of a symmetric difference, i.e. only..."
          },
          {
            "forms": ["--cherry"],
            "description": "A synonym for --right-only --cherry-mark --no-merges; useful to limit the out..."
          },
          {
            "forms": ["-g", "--walk-reflogs"],
            "description": "Instead of walking the commit ancestry chain, walk reflog entries from the mo..."
          },
          {
            "forms": ["--merge"],
            "description": "After a failed merge, show refs that touch files having a conflict and don't ..."
          },
          {
            "forms": ["--boundary"],
            "description": "Output excluded boundary commits. Boundary commits are prefixed with -"
          },
          {
            "forms": ["--simplify-by-decoration"],
            "description": "Commits that are referred by some branch or tag are selected"
          },
          {
            "forms": ["--show-pulls"],
            "description": "Include all commits from the default mode, but also any merge commits that ar..."
          },
          {
            "forms": ["--full-history"],
            "description": "Same as the default mode, but does not prune some history"
          },
          {
            "forms": ["--dense"],
            "description": "Only the selected commits are shown, plus some to have a meaningful history"
          },
          {
            "forms": ["--sparse"],
            "description": "All commits in the simplified history are shown"
          },
          {
            "forms": ["--simplify-merges"],
            "description": "Additional option to --full-history to remove some needless merges from the r..."
          },
          {
            "forms": ["--ancestry-path"],
            "description": "When given a range of commits to display (e.g. commit1..commit2 or commit2 ^c..."
          },
          {
            "forms": ["--full-history"],
            "description": "This mode differs from the default in one point: always follow all parents of..."
          },
          {
            "forms": ["--full-history"],
            "description": "Ordinary commits are only included if they are !TREESAME (though this can be ..."
          },
          {
            "forms": ["--dense"],
            "description": "Commits that are walked are included if they are not TREESAME to any parent"
          },
          {
            "forms": ["--sparse"],
            "description": "All commits that are walked are included. Note that without --full-history, t..."
          },
          {
            "forms": ["--simplify-merges"],
            "description": "First, build a history graph in the same way that --full-history with parent ..."
          },
          {
            "forms": ["--ancestry-path"],
            "description": "Limit the displayed commits to those which are an ancestor of <commit>, or wh..."
          },
          {
            "forms": ["--show-pulls"],
            "description": "In addition to the commits shown in the default history, show each merge comm..."
          },
          {
            "forms": ["--date-order"],
            "description": "Show no parents before all of its children are shown, but otherwise show comm..."
          },
          {
            "forms": ["--author-date-order"],
            "description": "Show no parents before all of its children are shown, but otherwise show comm..."
          },
          {
            "forms": ["--topo-order"],
            "description": "Show no parents before all of its children are shown, and avoid showing commi..."
          },
          {
            "forms": ["--reverse"],
            "description": "Output the commits chosen to be shown (see Commit Limiting section above) in ..."
          },
          {
            "forms": ["--no-walk"],
            "description": "Only show the given commits, but do not traverse their ancestors. This has no..."
          },
          {
            "forms": ["--do-walk"],
            "description": "Overrides a previous --no-walk"
          },
          {
            "forms": ["--pretty", "--format"],
            "description": "Pretty-print the contents of the commit logs in a given format, where <format..."
          },
          {
            "forms": ["--abbrev-commit"],
            "description": "Instead of showing the full 40-byte hexadecimal commit object name, show a pr..."
          },
          {
            "forms": ["--no-abbrev-commit"],
            "description": "Show the full 40-byte hexadecimal commit object name. This negates --abbrev-c..."
          },
          {
            "forms": ["--oneline"],
            "description": "This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together"
          },
          {
            "forms": ["--encoding"],
            "description": "Commit objects record the character encoding used for the log message in thei..."
          },
          {
            "forms": ["--expand-tabs", "--expand-tabs", "--no-expand-tabs"],
            "description": "Perform a tab expansion (replace each tab with enough spaces to fill to the n..."
          },
          {
            "forms": ["--notes"],
            "description": "Show the notes (see git-notes(1)) that annotate the commit, when showing the ..."
          },
          {
            "forms": ["--no-notes"],
            "description": "Do not show notes. This negates the above --notes option, by resetting the li..."
          },
          {
            "forms": ["--show-notes", "--standard-notes"],
            "description": "These options are deprecated. Use the above --notes/--no-notes options instead"
          },
          {
            "forms": ["--show-signature"],
            "description": "Check the validity of a signed commit object by passing the signature to gpg ..."
          },
          {
            "forms": ["--relative-date"],
            "description": "Synonym for --date=relative"
          },
          {
            "forms": ["--date"],
            "description": "Only takes effect for dates shown in human-readable format, such as when usin..."
          },
          {
            "forms": ["--parents"],
            "description": "Print also the parents of the commit (in the form \"commit parent...\"). Also e..."
          },
          {
            "forms": ["--children"],
            "description": "Print also the children of the commit (in the form \"commit child...\"). Also e..."
          },
          {
            "forms": ["--left-right"],
            "description": "Mark which side of a symmetric difference a commit is reachable from. Commits..."
          },
          {
            "forms": ["--graph"],
            "description": "Draw a text-based graphical representation of the commit history on the left ..."
          },
          {
            "forms": ["--show-linear-break"],
            "description": "When --graph is not used, all history branches are flattened which can make i..."
          }
        ],
        "subcommands": {}
      }
    }
  }
}
